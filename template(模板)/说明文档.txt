使用说明（本地运行）
1) 安装依赖
python -V          # Python 3.8+ 建议
pip install python-docx

2) Word 文件格式要求（示例）

每题一个块，题与题之间可留空行；支持三种题型：单选 / 多选 / 判断。题型可以写在题号后或题干末尾。

1.（单选）劳动的双重含义决定了从业人员全新的（ ）和职业道德观念。
A. 精神文明
B. 思想境界
C. 劳动态度
D. 整体素质
答案：C

2、(多选) 下列哪几项是……
A. 选项1
B. 选项2
C. 选项3
D. 选项4
答案：A、C、D

3) （判断）关于……的说法正确的是：
答案：对        # 也支持：正确/错误、对/错、√/×、T/F、Yes/No


选项行：以 A. / A、 / A) 开头均可；字母不限于 A-D。

答案行：答案：A,B,D、答案：AB、答案：A、C 都可识别。

判断题：脚本会自动生成选项 A=正确, B=错误，并把“对/错/√/×/T/F”等映射到 A/B。

3) 运行命令

把 试题.docx 转成 questions_data.js：

python /path/to/word2questionsjs.py "试题.docx" -o questions_data.js


常用参数：

--start-number 1：起始题号（默认 1）。

--respect-number：优先采用 Word 里自带的题号。

--append-to 现有.js：把新题合并到已有 JS（识别 window.questionsData = [...] 结构）。

--renumber-after-merge：合并后按顺序重新编号（从 --start-number 开始）。

示例：在旧题库后追加新题，并整体重排题号从 1 开始：

python word2questionsjs.py 新题.docx -o questions_data.js \
  --append-to ./questions_data.js --renumber-after-merge --start-number 1

4) 输出文件结构

脚本会输出与你前端一致的变量名与结构：

window.questionsData = [
  {
    "number": 1,
    "type": "单选",              // 单选 / 多选 / 判断
    "question": "……",
    "options": [
      {"label": "A", "text": "……"},
      {"label": "B", "text": "……"}
    ],
    "answer": ["C"]             // 多选会是 ["A","C","D"]；判断为 ["A"] 或 ["B"]
  }
];